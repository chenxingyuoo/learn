{"version":3,"sources":["../../../../assets/scripts/assets/scripts/Star.js"],"names":["cc","Class","extends","Component","properties","pickRadius","game","default","serializable","onLoad","enabled","init","node","opacity","reuse","getPlayerDistance","playerPos","player","getCenterPos","dist","pDistance","position","onPicked","pos","getPosition","gainScore","despawnStar","update","dt","opacityRatio","timer","starDuration","minOpacity","Math","floor"],"mappings":";;;;;;AAAAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACAC,oBAAY,CAFJ;AAGR;AACAC,cAAM;AACFC,qBAAS,IADP;AAEFC,0BAAc;AAFZ;AAJE,KAHP;;AAaLC,YAAQ,kBAAY;AAChB,aAAKC,OAAL,GAAe,KAAf;AACH,KAfI;;AAiBL;AACAC,UAAM,cAAUL,IAAV,EAAgB;AAClB,aAAKA,IAAL,GAAYA,IAAZ;AACA,aAAKI,OAAL,GAAe,IAAf;AACA,aAAKE,IAAL,CAAUC,OAAV,GAAoB,GAApB;AACH,KAtBI;;AAwBLC,SAxBK,iBAwBER,IAxBF,EAwBQ;AACT,aAAKK,IAAL,CAAUL,IAAV;AACH,KA1BI;;;AA4BLS,uBAAmB,6BAAY;AAC3B;AACA,YAAIC,YAAY,KAAKV,IAAL,CAAUW,MAAV,CAAiBC,YAAjB,EAAhB;AACA;AACA,YAAIC,OAAOnB,GAAGoB,SAAH,CAAa,KAAKR,IAAL,CAAUS,QAAvB,EAAiCL,SAAjC,CAAX;AACA,eAAOG,IAAP;AACH,KAlCI;;AAoCLG,cAAU,oBAAW;AACjB,YAAIC,MAAM,KAAKX,IAAL,CAAUY,WAAV,EAAV;AACA;AACA,aAAKlB,IAAL,CAAUmB,SAAV,CAAoBF,GAApB;AACA;AACA,aAAKjB,IAAL,CAAUoB,WAAV,CAAsB,KAAKd,IAA3B;AACH,KA1CI;;AA4CL;AACAe,YAAQ,gBAAUC,EAAV,EAAc;AAClB;AACA,YAAI,KAAKb,iBAAL,KAA2B,KAAKV,UAApC,EAAgD;AAC5C;AACA,iBAAKiB,QAAL;AACA;AACH;AACD;AACA,YAAIO,eAAe,IAAI,KAAKvB,IAAL,CAAUwB,KAAV,GAAgB,KAAKxB,IAAL,CAAUyB,YAAjD;AACA,YAAIC,aAAa,EAAjB;AACA,aAAKpB,IAAL,CAAUC,OAAV,GAAoBmB,aAAaC,KAAKC,KAAL,CAAWL,gBAAgB,MAAMG,UAAtB,CAAX,CAAjC;AACH;AAxDI,CAAT","file":"Star.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["cc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // 星星和主角之间的距离小于这个数值时，就会完成收集\n        pickRadius: 0,\n        // 暂存 Game 对象的引用\n        game: {\n            default: null,\n            serializable: false\n        }\n    },\n\n    onLoad: function () {\n        this.enabled = false;\n    },\n\n    // use this for initialization\n    init: function (game) {\n        this.game = game;\n        this.enabled = true;\n        this.node.opacity = 255;\n    },\n\n    reuse (game) {\n        this.init(game);\n    },\n\n    getPlayerDistance: function () {\n        // 根据 player 节点位置判断距离\n        var playerPos = this.game.player.getCenterPos();\n        // 根据两点位置计算两点之间距离\n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n\n    onPicked: function() {\n        var pos = this.node.getPosition();\n        // 调用 Game 脚本的得分方法\n        this.game.gainScore(pos);\n        // 当星星被收集时，调用 Game 脚本中的接口，销毁当前星星节点，生成一个新的星星\n        this.game.despawnStar(this.node);\n    },\n\n    // called every frame\n    update: function (dt) {\n        // 每帧判断和主角之间的距离是否小于收集距离\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // 调用收集行为\n            this.onPicked();\n            return;\n        }\n        // 根据 Game 脚本中的计时器更新星星的透明度\n        var opacityRatio = 1 - this.game.timer/this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    },\n});\n"]}