// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: app.proto

package xgtmp_srv_app

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for App service

type AppService interface {
	// 创建APP信息
	CreateAppInfo(ctx context.Context, in *MobileApplication, opts ...client.CallOption) (*AppResponse, error)
	// 更新APP信息
	UpdateAppInfo(ctx context.Context, in *MobileApplication, opts ...client.CallOption) (*AppResponse, error)
	// 删除App信息
	DeleteAppInfo(ctx context.Context, in *MobileApplication, opts ...client.CallOption) (*AppResponse, error)
	// 查询APP信息
	QueryAppInfo(ctx context.Context, in *AccessId, opts ...client.CallOption) (*AppResponse, error)
}

type appService struct {
	c    client.Client
	name string
}

func NewAppService(name string, c client.Client) AppService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "xgtmp.srv.app"
	}
	return &appService{
		c:    c,
		name: name,
	}
}

func (c *appService) CreateAppInfo(ctx context.Context, in *MobileApplication, opts ...client.CallOption) (*AppResponse, error) {
	req := c.c.NewRequest(c.name, "App.CreateAppInfo", in)
	out := new(AppResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) UpdateAppInfo(ctx context.Context, in *MobileApplication, opts ...client.CallOption) (*AppResponse, error) {
	req := c.c.NewRequest(c.name, "App.UpdateAppInfo", in)
	out := new(AppResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) DeleteAppInfo(ctx context.Context, in *MobileApplication, opts ...client.CallOption) (*AppResponse, error) {
	req := c.c.NewRequest(c.name, "App.DeleteAppInfo", in)
	out := new(AppResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appService) QueryAppInfo(ctx context.Context, in *AccessId, opts ...client.CallOption) (*AppResponse, error) {
	req := c.c.NewRequest(c.name, "App.QueryAppInfo", in)
	out := new(AppResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for App service

type AppHandler interface {
	// 创建APP信息
	CreateAppInfo(context.Context, *MobileApplication, *AppResponse) error
	// 更新APP信息
	UpdateAppInfo(context.Context, *MobileApplication, *AppResponse) error
	// 删除App信息
	DeleteAppInfo(context.Context, *MobileApplication, *AppResponse) error
	// 查询APP信息
	QueryAppInfo(context.Context, *AccessId, *AppResponse) error
}

func RegisterAppHandler(s server.Server, hdlr AppHandler, opts ...server.HandlerOption) error {
	type app interface {
		CreateAppInfo(ctx context.Context, in *MobileApplication, out *AppResponse) error
		UpdateAppInfo(ctx context.Context, in *MobileApplication, out *AppResponse) error
		DeleteAppInfo(ctx context.Context, in *MobileApplication, out *AppResponse) error
		QueryAppInfo(ctx context.Context, in *AccessId, out *AppResponse) error
	}
	type App struct {
		app
	}
	h := &appHandler{hdlr}
	return s.Handle(s.NewHandler(&App{h}, opts...))
}

type appHandler struct {
	AppHandler
}

func (h *appHandler) CreateAppInfo(ctx context.Context, in *MobileApplication, out *AppResponse) error {
	return h.AppHandler.CreateAppInfo(ctx, in, out)
}

func (h *appHandler) UpdateAppInfo(ctx context.Context, in *MobileApplication, out *AppResponse) error {
	return h.AppHandler.UpdateAppInfo(ctx, in, out)
}

func (h *appHandler) DeleteAppInfo(ctx context.Context, in *MobileApplication, out *AppResponse) error {
	return h.AppHandler.DeleteAppInfo(ctx, in, out)
}

func (h *appHandler) QueryAppInfo(ctx context.Context, in *AccessId, out *AppResponse) error {
	return h.AppHandler.QueryAppInfo(ctx, in, out)
}
